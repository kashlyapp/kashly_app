name: CI
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.0"

  # opcional: imprimir versió de Flutter
  #- name: Flutter version
  #  run: flutter --version

      - name: Pub get
        run: flutter pub get

      - name: Analyze
        run: flutter analyze

      # IMPORTANT: instal·lar lcov ABANS de llegir coverage (si no està present)
      - name: Install lcov
        run: sudo apt-get update && sudo apt-get install -y lcov

      - name: Test with coverage
        run: flutter test --coverage

      - name: Filter coverage to lib
        run: |
          set -e
          LCOV="coverage/lcov.info"
          PROJ="$(pwd)"
          if [ ! -f "$LCOV" ]; then
            echo "ERROR: $LCOV not found"; exit 1
          fi
          # Inclou tot lib/**
          lcov --extract "$LCOV" "$PROJ/lib/*" "$PROJ/lib/**" -o "$LCOV" || true
          # Exclou generats i firebase_options.dart
          lcov --remove "$LCOV" "$PROJ/lib/**.g.dart" "$PROJ/lib/firebase_options.dart" -o "$LCOV" || true
          echo "Filtered summary:" && lcov --summary "$LCOV"

      - name: Enforce coverage ≥ 70%
        run: |
          set -e
          THRESHOLD=70
          FILE=coverage/lcov.info
          if [ ! -f "$FILE" ]; then
            echo "Error: $FILE not found"
            ls -la coverage || true
            exit 1
          fi
          # Filtra a lib/ i treu fitxers autogenerats
          lcov --extract "$FILE" "$(pwd)/lib/*" "$(pwd)/lib/**" -o "$FILE" || true
          lcov --remove  "$FILE" "$(pwd)/lib/**.g.dart" "$(pwd)/lib/firebase_options.dart" -o "$FILE" || true
          # Línies cobertes
          LINES=$(lcov --summary "$FILE" 2>/dev/null | awk '/lines[[:space:]]*:/ {print $2}' | tr -d '%')
          echo "Line coverage: ${LINES}%"
          # Compara de forma robusta
          LINES_INT=${LINES%.*}
          if [ -z "$LINES_INT" ]; then
            echo "Parse error reading coverage"; exit 1
          fi
          if [ "$LINES_INT" -lt "$THRESHOLD" ]; then
            echo "Coverage gate failed (need ≥ ${THRESHOLD}%)"; exit 1
          fi
